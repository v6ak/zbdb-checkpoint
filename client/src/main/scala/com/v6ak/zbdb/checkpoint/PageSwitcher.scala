package com.v6ak.zbdb.checkpoint

import com.v6ak.mdc.drawer.MDCTemporaryDrawer
import org.scalajs.dom
import org.scalajs.dom.ext._
import org.scalajs.dom.raw.{HTMLAnchorElement, Node}

class PageSwitcher(initialPage: String, defaultPage: String, dynamicPages: Map[String, AutogeneratedPage], drawer: MDCTemporaryDrawer, enhance: Node => Node) {

  var lastPageOption: Option[(Boolean, String)] = Some(false, initialPage)

  private def hideLastPage(): Unit = {
    for((remove, id) <- lastPageOption){
      val oldPage = dom.document.getElementById(id)
      oldPage.classList.add("hidden")
      if(remove){
        dom.document.body.removeChild(oldPage)
      }
    }
  }

  private def highlightLink(currentId: String): Unit = {
    val links = dom.document.getElementById("main-menu").getElementsByClassName("mdc-list-item")
    for (link <- links.map(_.asInstanceOf[HTMLAnchorElement])) {
      if (link.getAttribute("href") == "#" + currentId) {
        link.classList.add("mdc-list-item--activated")
      } else {
        link.classList.remove("mdc-list-item--activated")
      }
    }
  }

  def showPage(id: String): Unit = {
    val isDynamic = dynamicPages.get(id) match {
      case None =>
        dom.document.getElementById(id).classList.remove("hidden")
        false
      case Some(ap) =>
        val node = ap.create()
        dom.document.body.appendChild(enhance(Templates.activePage(id, node)))
        true
    }
    lastPageOption = Some((isDynamic, id))
  }

  def updateActivePage(): Unit = {
    val currentHash = dom.window.location.hash
    val currentId = currentHash.substring(1) match {
      case "" => defaultPage
      case other => other
    }
    highlightLink(currentId)
    hideLastPage()
    showPage(currentId)
    drawer.open = false
  }

}
